name: Electron Forge CI/CD

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches-ignore:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  # üîé Linter check
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint -- --max-warnings=0

  # üõ†Ô∏è Build for feature branches / PRs
  build:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            C:\Users\runneradmin\AppData\Local\electron
          key: electron-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            electron-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Electron App
        run: npm run make

      - name: Sanitize branch name
        id: sanitize
        run: echo "branch=${GITHUB_REF_NAME//\//-}" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ steps.sanitize.outputs.branch }}-${{ matrix.os }}
          path: out/make
          retention-days: 14

      - name: Comment PR with artifact link
        if: ${{ matrix.os == 'ubuntu-latest' }} # only comment once
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: electron-artifacts
          number: ${{ github.event.pull_request.number }}
          message: |
            ‚úÖ Build completed for **${{ steps.sanitize.outputs.branch }}**


            - [Linux build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Windows build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [macOS build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            (_Artifacts are available for 14 days_)

  # üßπ Cleanup after PR is merged/closed
  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Sanitize branch name
        id: sanitize
        run: echo "branch=${GITHUB_HEAD_REF//\//-}" >> $GITHUB_OUTPUT

      - name: Delete artifacts for branch (Linux + Windows)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            electron-build-${{ steps.sanitize.outputs.branch }}-ubuntu-latest
            electron-build-${{ steps.sanitize.outputs.branch }}-windows-latest

  # üöÄ Release job when pushing tags
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            C:\Users\runneradmin\AppData\Local\electron
          key: electron-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            electron-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Electron App
        run: npm run make

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ matrix.os }}
          path: out/make
          retention-days: 7

  # üìù Publish GitHub Release with built artifacts
  publish-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:

      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: release-build-ubuntu-latest
          path: release/linux

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: release-build-windows-latest
          path: release/windows

      - name: Download macOS build
        uses: actions/download-artifact@v4
        with:
          name: release-build-macos-latest
          path: release/macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/linux/**
            release/windows/**
            release/macos/**
